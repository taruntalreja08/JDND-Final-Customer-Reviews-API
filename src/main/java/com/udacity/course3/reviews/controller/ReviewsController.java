package com.udacity.course3.reviews.controller;

import com.udacity.course3.reviews.document.NestedComments;
import com.udacity.course3.reviews.model.Product;
import com.udacity.course3.reviews.model.Review;
import com.udacity.course3.reviews.repository.ProductRepository;
import com.udacity.course3.reviews.repository.ReviewMongoRepository;
import com.udacity.course3.reviews.repository.ReviewRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
 * Spring REST controller for working with review entity.
 */
@RestController
public class ReviewsController {

    // TODO: Wire JPA repositories here
	@Autowired // This means to get the bean called ReviewRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private ReviewRepository reviewRepository;
	@Autowired // This means to get the bean called ProductRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private ProductRepository productRepository;
	
	@Autowired
	private ReviewMongoRepository reviewMongoRepository;


    /**
     * Creates a review for a product.
     * <p>
     * 1. Add argument for review entity. Use {@link RequestBody} annotation.
     * 2. Check for existence of product.
     * 3. If product not found, return NOT_FOUND.
     * 4. If found, save review.
     *
     * @param productId The id of the product.
     * @return The created review or 404 if product id is not found.
     */
    @RequestMapping(value = "/reviews/products/{productId}", method = RequestMethod.POST)
    public ResponseEntity<?> createReviewForProduct(@PathVariable("productId") Integer productId, @RequestBody String productReview) {	
		//get the product with the given id
		Optional<Product>  product = productRepository.findById(productId);
		
		if (!product.isPresent())
			//error status
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("NOT_FOUND"); 
	
        // save review using product review
		Review review = new Review();
		review.setProduct(product.get());
		review.setReview(productReview);
		reviewRepository.save(review);
				
		NestedComments reviewNestedWithComments =  new NestedComments(review.getId(),productReview);	
        reviewMongoRepository.save(reviewNestedWithComments);
																						
		//success status
		return ResponseEntity.status(HttpStatus.CREATED).body("Review Saved");
	   
    }

    /**
     * Lists reviews by product.
     *
     * @param productId The id of the product.
     * @return The list of reviews.
     */
    @RequestMapping(value = "/reviews/products/{productId}", method = RequestMethod.GET)
    public ResponseEntity<List<String>> listReviewsForProduct(@PathVariable("productId") Integer productId) {
    	List<String> reviewsList = new ArrayList<>();	

    	Optional<Product>  product = productRepository.findById(productId);
    	if (!product.isPresent())
    		//error status  
		    return new ResponseEntity<List<String>>(reviewsList, HttpStatus.NOT_FOUND); 

    	if (product.get().getReviews().isEmpty()){
			//error status  	   
		    return new ResponseEntity<List<String>>(reviewsList, HttpStatus.NOT_FOUND);
		 }
    			
    	for (Review r :product.get().getReviews())
    		reviewsList.add((reviewMongoRepository.findById(r.getId())).getReview());
       	
	   return new ResponseEntity<List<String>>(reviewsList, HttpStatus.OK);
	
	}
}
