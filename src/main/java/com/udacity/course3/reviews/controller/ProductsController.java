package com.udacity.course3.reviews.controller;

import com.udacity.course3.reviews.model.Product;
import com.udacity.course3.reviews.repository.ProductRepository;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
 * Spring REST controller for working with product entity.
 */
@RestController
@RequestMapping("/products")
public class ProductsController {

    // TODO: Wire JPA repositories here

    /**
     * Creates a product.
     *
     * 1. Accept product as argument. Use {@link RequestBody} annotation.
     * 2. Save product.
     */
	 
	@Autowired // This means to get the bean called ProductRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private ProductRepository productRepository;
	
	@RequestMapping(value = "/", method = RequestMethod.POST)	
    @ResponseStatus(HttpStatus.CREATED)
    public void createProduct(@RequestBody String productName) {
        // create new product with a product name
		Product product = new Product();
        // System.out.println(productName);
		product.setProduct(productName);
		productRepository.save(product);		
    }

    /**
     * Finds a product by id.
     *
     * @param id The id of the product.
     * @return The product if found, or a 404 not found.
     */
	 
    @RequestMapping(value = "/{id}")
    public ResponseEntity<?> findById(@PathVariable("id") Integer id) {
        //get product from product id
    	Product productName = productRepository.findProductNameById(id);
		if (productName == null)
			// error status
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Product Not found"); 
				
		// success status
		return new ResponseEntity<>(productName.getProduct(), HttpStatus.OK);
	}

    /**
     * Lists all products.
     *
     * @return The list of products.
     */
    @RequestMapping(value = "/", method = RequestMethod.GET)
    public List<?> listProducts() {
		List<String> products = new ArrayList<>(); 
		 // find all products and convert iterable to list and save it in productsList
		for (Product p : productRepository.findAll())
			products.add(p.getProduct());
		return products;
    }
}